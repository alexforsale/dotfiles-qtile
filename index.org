#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:{} {}:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Qtile configuration file
#+date: <2024-03-26 Tue>
#+author: Kristian Alexander P
#+email: alexforsale@yahoo.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.2 (Org mode 9.6.15)
#+cite_export:
#+property: EXPORT_FILE_NAME: index.html
#+startup: content indent
#+setupfile: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
* Qtile
This is the configuration file for /qtile/ window manager.
** Default Configuration file
:PROPERTIES:
:header-args: :tangle no
:END:

This is the default configuration that comes from the package in /archlinux/:
*** header :noexport:
#+begin_src python
# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#+end_src
*** imports
#+begin_src python
from libqtile import bar, layout, qtile, widget
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
#+end_src
*** variables
#+begin_src python
mod = "mod4"
terminal = guess_terminal()
dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
floats_kept_above = True
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
#+end_src
*** keybindings
#+begin_src python
keys = [
    # A list of available commands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "w", lazy.window.kill(), desc="Kill focused window"),
    Key(
        [mod],
        "f",
        lazy.window.toggle_fullscreen(),
        desc="Toggle fullscreen on the focused window",
    ),
    Key([mod], "t", lazy.window.toggle_floating(), desc="Toggle floating on the focused window"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
]

# Add key bindings to switch VTs in Wayland.
# We can't check qtile.core.name in default config as it is loaded before qtile is started
# We therefore defer the check until the key binding is run by using .when(func=...)
for vt in range(1, 8):
    keys.append(
        Key(
            ["control", "mod1"],
            f"f{vt}",
            lazy.core.change_vt(vt).when(func=lambda: qtile.core.name == "wayland"),
            desc=f"Switch to VT{vt}",
        )
    )

#+end_src
*** groups
#+begin_src python
groups = [Group(i) for i in "123456789"]

for i in groups:
    keys.extend(
        [
            # mod1 + group number = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod1 + shift + group number = switch to & move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + group number = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )
#+end_src
*** layouts
#+begin_src python
layouts = [
    layout.Columns(border_focus_stack=["#d75f5f", "#8f3d3d"], border_width=4),
    layout.Max(),
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]
#+end_src
*** default widgets and extensions
#+begin_src python
widget_defaults = dict(
    font="sans",
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()
#+end_src
*** screens
#+begin_src python
screens = [
    Screen(
        bottom=bar.Bar(
            [
                widget.CurrentLayout(),
                widget.GroupBox(),
                widget.Prompt(),
                widget.WindowName(),
                widget.Chord(
                    chords_colors={
                        "launch": ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
                widget.TextBox("default config", name="default"),
                widget.TextBox("Press &lt;M-r&gt; to spawn", foreground="#d75f5f"),
                # NB Systray is incompatible with Wayland, consider using StatusNotifier instead
                # widget.StatusNotifier(),
                widget.Systray(),
                widget.Clock(format="%Y-%m-%d %a %I:%M %p"),
                widget.QuickExit(),
            ],
            24,
            # border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
        # You can uncomment this variable if you see that on X11 floating resize/moving is laggy
        # By default we handle these events delayed to already improve performance, however your system might still be struggling
        # This variable is set to None (no cap) by default, but you can set it to 60 to indicate that you limit it to 60 events per second
        # x11_drag_polling_rate = 60,
    ),
]
#+end_src
*** mouse
#+begin_src python
# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

#+end_src
** My Configuration file
:PROPERTIES:
:header-args: :tangle .config/qtile/config.py :mkdirp t
:END:
*** header :noexport:
#+begin_src python
# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#+end_src
*** imports
#+begin_src python
from libqtile import bar, layout, qtile, widget, hook
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
from os import getenv, system
#+end_src
*** variables
#+begin_src python
mod = "mod4"

terminal = getenv("TERMINAL") or guess_terminal()
filemanager = getenv("FILE") or "thunar"
browser = getenv("BROWSER") or "firefox"
mail_app = getenv("MAIL_APP") or "thunderbird"
guiemacs = "emacsclient -c -a emacs"
tuiemacs = "emacsclient -t -a emacs"
visual  = getenv("VISUAL") or guiemacs
ncmpcpp = f"""{terminal} --class ncmpcpp -e ncmpcpp""" if terminal == 'alacritty' else f"""{terminal} -e ncmpcpp"""
htop = f"""{terminal} --class htop -e htop""" if terminal == 'alacritty' else f"""{terminal} -e htop"""
nmtui = f"""{terminal} --class nmtui -e nmtui""" if terminal == 'alacritty' else f"""{terminal} -e nmtui"""
khal = f"""{terminal} --class khal -e khal interactive""" if terminal == 'alacritty' else f"""{terminal} -e khal interactive"""
vim = f"""{terminal} --class vim -e vim""" if terminal == 'alacritty' else f"""{terminal} -e vim"""
nw_emacs = f"""{terminal} --class nw-emacs -e {tuiemacs}""" if terminal == 'alacritty' else f"""{terminal} -e {tuiemacs}"""
dired = f"""{terminal} -e {tuiemacs} -e '(dired (getenv \"HOME\"))'"""
tesseract_command = "maim -u -s -b 5 -l -c 0.3,0.4,0.6,0.4 -d 0.1 | xclip -selection clipboard -t image/png && notify-send -i camera-photo 'Screenshot' 'Saved to clipboard'"

logout = "rofi-logout qtile-logout"
menu = "rofi -show drun -theme qtile-menu"
clipboard = """rofi -theme qtile-clipboard -modi "clipboard:greenclip print" -show clipboard"""
emoji = "rofi -show emoji -theme qtile-emoji"
backlight_up = "dunst-backlight +1%"
backlight_down = "dunst-backlight 1%-"
volume_up = "dunst-volume -i 1"
volume_down = "dunst-volume -d 1"
volume_mute = "dunst-volume -t"
audio_play = "playerctl play-pause"
audio_next = "playerctl next"
audio_prev = "playerctl previous"
printscreen = "flameshot gui"
dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
floats_kept_above = True
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        ,*layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
#+end_src
*** keybindings
#+begin_src python
keys = []
#+end_src
**** focus movements
#+begin_src python
focus_keys = [
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    #Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    Key([mod], "Left", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "Right", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "Down", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "Up", lazy.layout.up(), desc="Move focus up"),
]

keys.extend(focus_keys)
#+end_src
**** window movements
#+begin_src python
movement_keys = [
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod,"shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),

    Key([mod, "shift"], "Left", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "Right", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod,"shift"], "Down", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "Up", lazy.layout.shuffle_up(), desc="Move window up"),
]

keys.extend(movement_keys)
#+end_src
**** resize
#+begin_src python
resize_keys = [
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),

    Key([mod, "control"], "Left", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "Right", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "Down", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "Up", lazy.layout.grow_up(), desc="Grow window up"),
]

keys.extend(resize_keys)
#+end_src
**** layout keys
#+begin_src python
layout_keys = [
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
]

keys.extend(layout_keys)
#+end_src
**** multimedia_key
#+begin_src python
multimedia_keys = [
    Key([], "XF86MonBrightnessUp", lazy.spawn(backlight_up), desc="brightness up +1%"),
    Key([], "XF86MonBrightnessDown", lazy.spawn(backlight_down), desc="brightness down +1%"),
    Key([], "XF86AudioRaiseVolume", lazy.spawn(volume_up), desc="volume up +1%"),
    Key([], "XF86AudioLowerVolume", lazy.spawn(volume_down), desc="volume down +1%"),
    Key([], "XF86AudioMute", lazy.spawn(volume_mute), desc="volume mute"),
    Key([], "Print", lazy.spawn(printscreen), desc="print screen"),
    Key([], "XF86MyComputer", lazy.spawn(browser), desc="browser"),
    Key([], "XF86Mail", lazy.spawn(mail_app), desc="mail app"),
    Key([], "XF86AudioNext", lazy.spawn(audio_next), desc="next audio"),
    Key([], "XF86AudioPrev", lazy.spawn(audio_prev), desc="previous audio"),
]

keys.extend(multimedia_keys)
#+end_src
**** Application Keys
***** single modifier keys only
#+begin_src python
mod_keys = [
    Key([mod], "grave", lazy.spawn("dunstctl close"), desc="dunstctl close"),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    Key([mod], "e", lazy.spawn(filemanager), desc="Launch file manager"),
    Key([mod], "Tab", lazy.screen.toggle_group(), desc="Toggle between groups"),
    Key([mod], "q", lazy.spawn(logout), desc="logout"),
    Key([mod],"c", lazy.spawn(clipboard), desc="clipboard"),
    Key([mod],"d", lazy.spawn(menu), desc="menu"),
    Key([mod],"Comma", lazy.spawn(emoji), desc="emoji"),
    Key([mod], "F4", lazy.window.kill(), desc="Kill focused window"),
    Key(["mod1"], "F4", lazy.window.kill(), desc="Kill focused window"),
    Key(
        [mod],
        "f",
        lazy.window.toggle_fullscreen(),
        desc="Toggle fullscreen on the focused window",
    ),
    Key([mod], "t", lazy.window.toggle_floating(), desc="Toggle floating on the focused window"),
]

keys.extend(mod_keys)
#+end_src
***** Mod + Alt (Mod1) keys
#+begin_src python
mod_alt_keys = [
    Key([mod, "mod1"], "Tab", lazy.next_layout(), desc="Toggle between layouts" ),
    Key([mod, "mod1"], "b", lazy.spawn("rofi-rbw"), desc="Web browser" ),
    Key([mod, "mod1"], "f", lazy.spawn(browser), desc="Web browser" ),
    Key([mod, "mod1"], "m", lazy.spawn(ncmpcpp), desc="Ncmpcpp" ),
    Key([mod, "mod1"], "h", lazy.spawn(htop), desc="htop" ),
    Key([mod, "mod1"], "n", lazy.spawn(visual), desc="visual editor" ),
    Key([mod, "mod1"], "p", lazy.spawn("rofi-pass"), desc="rofi frontend for pass" ),
    Key([mod, "mod1"], "t", lazy.spawn(mail_app), desc="Mail application" ),
    Key([mod, "mod1"], "w", lazy.spawn(nmtui), desc="NMtui" ),
    Key([mod, "mod1"], "v", lazy.spawn("pavucontrol"), desc="Launch pavucontrol"),

    Key([mod, "mod1"], "grave", lazy.spawn("dunstctl history-pop"), desc="dunst pop history"),
]

keys.extend(mod_alt_keys)
#+end_src
***** Mod + Shift keys
#+begin_src python
mod_shift_keys = [
    Key([mod, "Shift"], "t", lazy.spawn(tesseract_command), desc="tesseract" ),
    Key([mod, "Shift"], "grave", lazy.spawn("dunstctl context"), desc="dunst context" ),
]

keys.extend(mod_shift_keys)
#+end_src
***** Mod + Shift + Alt keys
#+begin_src python
mod_shift_alt_keys = [
    Key([mod, "Shift", "mod1"], "e", lazy.spawn(dired), desc="Launch dired"),
    Key([mod, "Shift", "mod1"], "n", lazy.spawn(nw_emacs), desc="Launch emacs in terminal"),
]

keys.extend(mod_shift_alt_keys)
#+end_src
***** mod + control keys
#+begin_src python
mod_control_keys = [
    Key([mod, "control"], "grave", lazy.spawn("dunstctl action"), desc="dunstctl action"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
]

keys.extend(mod_control_keys)
#+end_src

This is from the default
#+begin_src python :tangle no
keys = [
    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),

    # fn keys
]
#+end_src

***** wayland keys
#+begin_src python
# Add key bindings to switch VTs in Wayland.
# We can't check qtile.core.name in default config as it is loaded before qtile is started
# We therefore defer the check until the key binding is run by using .when(func=...)
for vt in range(1, 8):
    keys.append(
        Key(
            ["control", "mod1"],
            f"f{vt}",
            lazy.core.change_vt(vt).when(func=lambda: qtile.core.name == "wayland"),
            desc=f"Switch to VT{vt}",
        )
    )

#+end_src
*** groups
#+begin_src python
groups = [Group(i) for i in "123456789"]

for i in groups:
    keys.extend(
        [
            # mod1 + group number = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod1 + shift + group number = switch to & move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + group number = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )
#+end_src
*** layouts
#+begin_src python
layouts = [
    layout.Columns(border_focus_stack=["#d75f5f", "#8f3d3d"], border_width=4),
    layout.Max(),
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]
#+end_src
*** default widgets and extensions
#+begin_src python
widget_defaults = dict(
    font="sans",
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()
#+end_src
*** screens
#+begin_src python
screens = [
    Screen(
        bottom=bar.Bar(
            [
                widget.CurrentLayout(),
                widget.GroupBox(),
                widget.Prompt(),
                widget.WindowName(),
                widget.Chord(
                    chords_colors={
                        "launch": ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
                widget.Backlight(
                    backlight_name="intel_backlight",
                    brightness_file="brightness",
                    max_brightness_file="max_brightness",
                    step=2,
                    format="󰳲: {percent:2.0%}",
                    change_command="brightnessctl set {0}%",
                ),
                widget.Battery(
                    low_percentage=0.2,
                    charge_char="󰂄",
                    discharge_char="",
                    empty_char="",
                    full_char="",
                    unknown_char="󱃌",
                    format="{char} {percent:2.0%}",
                    notify_below=15,
                    hide_threshold=70,
                ),
                widget.TextBox("default config", name="default"),
                widget.TextBox("Press &lt;M-r&gt; to spawn", foreground="#d75f5f"),
                # NB Systray is incompatible with Wayland, consider using StatusNotifier instead
                # widget.StatusNotifier(),
                widget.Systray(),
                widget.Clock(format="%Y-%m-%d %a %I:%M %p"),
                widget.QuickExit(),
            ],
            24,
            # border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
        # You can uncomment this variable if you see that on X11 floating resize/moving is laggy
        # By default we handle these events delayed to already improve performance, however your system might still be struggling
        # This variable is set to None (no cap) by default, but you can set it to 60 to indicate that you limit it to 60 events per second
        # x11_drag_polling_rate = 60,
    ),
]
#+end_src
*** mouse
#+begin_src python
# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

#+end_src
*** startups
#+begin_src python
STARTUP_COMMANDS = [
    "xsetroot -cursor_name left_ptr",
    "xset r rate 300 30",
    "xrdb -merge ~/.Xresources",
    "picom -b &",
    "nm-applet --indicator &",
    "gnome-keyring-daemon --components=pkcs11,secrets,ssh -r -d &",
    "/usr/lib/polkit-kde-authentication-agent-1 &",
    "xsettingsd &",
    "unclutter &",
    "volumeicon &",
    "greenclip daemon>/dev/null &",
    "dunst -conf ~/.config/dunst/dunstrc &",
    "/usr/lib/geoclue-2.0/demos/agent &",
    "~/.fehbg",
    "redshift &",
]

@hook.subscribe.startup_once
def autostart():
    """Stuffs to autostarts."""
    for cmd in STARTUP_COMMANDS:
        system(cmd)

#+end_src
** Utilities
:PROPERTIES:
:header-args: :tangle .config/qtile/util.py :mkdirp t
:END:

*** header :noexport:
#+begin_src python
# Copyright (c) 2024 alexforsale
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#+end_src
*** imports
#+begin_src python
#+end_src
** External utilities
*** rofi
**** menu
:PROPERTIES:
:header-args: :tangle .config/rofi/themes/qtile-menu.rasi :mkdirp t
:END:
#+begin_src css
/* -*- mode: css -*- */
@theme "nord"

window {
    location: southwest;
    anchor: center;
    width: 40%;
    x-offset: 375;
    y-offset: -135;
    padding-right: 25px;
}

listview {
    columns: 2;
    lines: 6;
}

/* inputbar { */
/*     children: [textbox-prompt]; */
/* } */

/* textbox-prompt { */
/*     str: "Apps"; */
/*     text-color: inherit; */
/* } */
#+end_src
**** logout
:PROPERTIES:
:header-args: :tangle .config/rofi/themes/qtile-logout.rasi :mkdirp t
:END:

#+begin_src css
/* -*-css -*- */
@theme "nord"

window {
    location: northeast;
    anchor:   center;
    transparency: "screenshot";
    width: 10%;
    padding: 10px;
    border:  0px;
    border-radius: 6px;
    spacing: 0;
    children: [mainbox];
    x-offset: -100;
    y-offset: 90;
}

listview {
    columns: 1;
    lines: 4;
}
#+end_src
**** clipboard
:PROPERTIES:
:header-args: :tangle .config/rofi/themes/qtile-clipboard.rasi :mkdirp t
:END:

#+begin_src css

/* -*- mode: css -*- */
@theme "nord"

window {
    location: southeast;
    anchor: center;
    width: 40%;
    x-offset: -390;
    y-offset: -135;
    padding-right: 25px;
}

listview {
    columns: 2;
    lines: 6;
}

/* inputbar { */
/*     children: [textbox-prompt]; */
/* } */

/* textbox-prompt { */
/*     str: "Apps"; */
/*     text-color: inherit; */
/* } */
#+end_src
**** emoji
:PROPERTIES:
:header-args: :tangle .config/rofi/themes/qtile-emoji.rasi :mkdirp t
:END:

#+begin_src css
/* -*- mode: css -*- */
@theme "nord"

window {
    location: northwest;
    anchor: center;
    width: 40%;
    x-offset: 390;
    y-offset: 130;
    padding-right: 25px;
}

listview {
    columns: 1;
    lines: 6;
}

/* inputbar { */
/*     children: [textbox-prompt]; */
/* } */

/* textbox-prompt { */
/*     str: "Apps"; */
/*     text-color: inherit; */
/* } */
#+end_src
